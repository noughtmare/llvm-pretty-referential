optpragmas {
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -O0 #-} -- saves a few seconds
}

module {Text.LLVM.Resolve}
{}
{
import Control.Monad.State
import Data.Bifunctor (Bifunctor (bimap, second))
import Data.Map (Map)
import qualified Data.Map
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)
import qualified LLVM.Types as R
import Data.Word (Word8,Word16,Word32,Word64)
import Data.Int (Int32,Int64)
import Data.List (zipWith4)

import Text.LLVM.AST
import Text.LLVM.AGData

import LLVM.TypeInference
import LLVM.Utils
import LLVM.Types (HasUniqueId (uniqueId))
import Debug.Trace
import System.IO.Unsafe
import System.IO

import Debug.Trace
}

include "AG.ag"

{
-- {-# NOINLINE trace #-}
-- trace :: String -> a -> a
-- trace str x = unsafePerformIO $ do
--   putStrLn str
--   hFlush stdout
--   return x

resolve :: Module -> R.Module
resolve m = res_Syn_Module $ wrap_Module (sem_Module m) Inh_Module
  { counter_Inh_Module = 0 }

-- mkValue :: R.Value' -> Maybe R.Value
-- mkValue (R.ValIdent x)  = Just (toValue x)
-- mkValue (R.ValSymbol x) = Just (toValue x)
-- mkValue (R.ValLabel x)  = Just (toValue x)
-- mkValue _ = Nothing
-- 
-- getTypeMay :: R.Value' -> Maybe R.Type
-- getTypeMay (R.ValIdent x)  = Just (getType x)
-- getTypeMay (R.ValSymbol x) = Just (getType x)
-- getTypeMay (R.ValLabel x)  = Just (getType x)
-- getTypeMay _ = Nothing
}

--------------------------------------------------------------------------------
-- Boring mechanical resolution code
--------------------------------------------------------------------------------

attr GlobalAliases [ | | res use {:} {[]} :: {[R.GlobalAlias]} ]
attr Globals       [ | | res use {:} {[]} :: {[R.Global]} ]
attr Declares      [ | | res use {:} {[]} :: {[R.Declare]} ]
attr Defines       [ | | res use {:} {[]} :: {[R.Define]} ]

attr Ident Symbol BlockLabel
  syn copy :: self

sem Module [ | | res :: {R.Module} ] | Module
  loc.res
    = R.Module
        @modSourceName
        @modDataLayout
        @modTypes.res
        @modNamedMd
        @modUnnamedMd.res
        @modComdat
        @modGlobals.res
        @modDeclares.res
        @modDefines.res
        @modInlineAsm
        @modAliases.res

sem GlobalAlias [ | | res :: {R.GlobalAlias} ] | GlobalAlias
  loc.uniq :: uniqueref counter
  loc.res
    = R.GlobalAlias
        @aliasLinkage
        @aliasVisibility
        @aliasName.copy
        @aliasType.res
        (mkValue "globalalias" (fromMaybe @aliasType.res @aliasValue.typ)
                 @aliasValue.uniq
                 @aliasValue.res
                 @aliasValue.name
                 [])
        @loc.uniq

type GlobalMdAttachments = map {KindMd} ValMd

attr GlobalMdAttachments [ | | res use {Map.insert @key} {mempty} :: {Map KindMd R.ValMd} ]
  -- | Entry +res = Map.insert @key @val.res

sem Global [ | | res :: {R.Global} ] | Global
  loc.uniq :: uniqueref counter
  loc.res
    = R.Global
        @globalSym.copy
        @globalAttrs
        @globalType.res
        ((\val -> mkValue "global" (fromMaybe @globalType.res @globalValue.typ)
                    @globalValue.uniq
                    val
                    @globalValue.name
                    []) <$> @globalValue.res)
        @loc.uniq
        @globalAlign
        @globalMetadata.res

sem Declare | * loc.uniq :: uniqueref counter
sem Declare [ | | res :: {R.Declare} ] | Declare
  loc.res
    = R.Declare
        @decLinkage
        @decVisibility
        @decRetType.res
        @decName.copy
        @decArgs.res
        @decVarArgs
        @decAttrs
        @loc.uniq
        @decComdat

type FnMdAttachments = map {KindMd} ValMd

attr FnMdAttachments [ | | res use {Map.insert @key} {mempty} :: {Map KindMd R.ValMd} ]
  -- | Entry +res = Map.insert @key @val.res

sem Define | * loc.uniq :: uniqueref counter
sem Define [ | | res :: {R.Define} ] | Define
  loc.res
    = R.Define
        @defLinkage
        @defVisibility
        @defRetType.res
        @defName.copy
        @defArgs.res
        @defVarArgs
        @defAttrs
        @defSection
        @defGC
        @defBody.res
        @loc.uniq
        @defMetadata.res
        @defComdat
  defArgs.md = case Map.lookup "dbg" @defMetadata.res of
                 Just (R.ValMdDebugInfo (R.DebugInfoSubprogram (R.DISubprogram { R.dispVariables = Just (R.ValMdNode xs) }))) -> xs
                 _ -> []

attr TypedIdents [ md :: {[Maybe R.ValMd]} | | ]
attr TypedIdent [ md :: {Maybe R.ValMd} | | ]

sem TypedIdents 
  | Cons (hd.md, tl.md) = case @lhs.md of
                            [] -> (Nothing, [])
                            (x:xs) -> (x, xs)

attr TypedIdents [ | | res use {:} {[]} :: {[R.Argument]} ]

sem TypedIdent | * loc.uniq :: uniqueref counter
sem TypedIdent [ | | res :: {R.Argument} ]
  | Typed loc.res = R.Argument @lhs.parentDefine @loc.name @typ.res @loc.uniq @lhs.md
          loc.name = case @lhs.md of
                       Just (R.ValMdDebugInfo (R.DebugInfoLocalVariable (R.DILocalVariable { R.dilvName = Just n }))) -> n
                       x -> prettyIdent $ @ident.copy

sem MaybeType [ | | res :: {Maybe R.Type} ]
  | Nothing loc.res = Nothing
  | Just loc.res = Just @just.res

attr Types [ | | res use {:} {[]} :: {[R.Type]} ]

sem Type | * loc.uniq :: uniqueref counter
sem Type [ | | res :: {R.Type} ]
  | PrimType     loc.res = R.PrimType @primType
  | Alias        loc.res
      = case @ident.resTy of
          R.Struct (Left _) ftys packed -> R.Struct (Right @ident.copy) ftys packed
          R.Opaque (Left _)             -> R.Opaque (Right @ident.copy)
          _ -> error "Unexpected alias: anonymous struct nor anonymous opaque type"
  | Array        loc.res = R.Array @size @elemType.res
  | FunTy        loc.res = R.FunTy @resType.res @argTypes.res @isVariadic
  | PtrTo        loc.res = R.PtrTo @toType.res
  | Struct       loc.res = R.Struct (Left @loc.uniq) @fieldTypes.res False
  | PackedStruct loc.res = R.Struct (Left @loc.uniq) @fieldTypes.res True
  | Vector       loc.res = R.Vector @size @elemType.res
  | Opaque       loc.res = R.Opaque (Left @loc.uniq)

attr BasicBlocks [ | | res use {:} {[]} :: {[R.BasicBlock]} ]

sem BasicBlock [ | | res :: {R.BasicBlock} ] | BasicBlock
  loc.res = R.BasicBlock @bbName @bbLabel @bbStmts.res @bbUniqueId @lhs.parentDefine

attr Stmts [ | | res use {:} {[]} :: {[R.Stmt]} ]

sem Stmt [ | | res :: {R.Stmt} ]
  | Result loc.res = R.Stmt (R.Result @ident.copy) @instr.res @mds.res @stmtUniqueId @lhs.parentBasicBlock
  | Effect loc.res = R.Stmt R.Effect               @instr.res @mds.res @stmtUniqueId @lhs.parentBasicBlock

attr StmtMds [ | | res use {:} {[]} :: {[(String,R.ValMd)]} ]

sem StmtMd [ | | res :: {(String, R.ValMd)} ]
  | Tuple loc.res = (@x1, @x2.res)

{
matchType :: R.Type -> R.Type -> Bool
matchType (R.FunTy t1 ts1 _) (R.FunTy t2 ts2 _) = matchType t1 t2 && and (zipWith matchType ts1 ts2)
matchType (R.Array n1 t1) (R.Array n2 t2) = n1 == n2 && matchType t1 t2
matchType (R.PtrTo t1) (R.PtrTo t2) = matchType t1 t2
matchType (R.Struct x _ _) (R.Struct y _ _) = True || x == y -- disable this for now, we could implement a full unification algorithm, but this is just for debugging purposes.
matchType (R.Vector n1 t1) (R.Vector n2 t2) = n1 == n2 && matchType t1 t2
matchType t1 t2 = t1 == t2

-- This functions does some consistency tests at runtime
mkValue :: String -> R.Type -> R.UniqueId -> R.Value' -> Maybe String -> [R.ValMd] -> R.Value
mkValue str t _ v@(R.ValIdent (R.IdentValStmt x)) _ _ | not (matchType t (getType x)) = error ("Stmt " ++ str ++ ": " ++ show (t,getType x,R.stmtInstr x))
mkValue str t _ v@(R.ValIdent x) _ _ | not (matchType t (getType x)) = error ("Ident " ++ str ++ ": " ++ show (t,getType x))
mkValue str t _ v@(R.ValSymbol x) _ _ | not (matchType t (getType x)) = error ("Symbol " ++ str ++ ": " ++ show (t,getType x))
mkValue _ t i v s m = R.Value t i v s m
}

-- These semantic rules convert the Instr type from llvm-pretty to the Instr type from llvm-pretty-referential.
-- The main difference is that every operand must be a full-fledged value.
-- In llvm-pretty, when the types of two arguments are known to be equal, one of them is left out.
-- For analyses we want a more uniform interface.
sem Instr [ | | res :: {R.Instr} ]
  | Ret           loc.res = R.Ret @retVal.res
  | RetVoid       loc.res = R.RetVoid
  | Arith         loc.res = R.Arith @op @lft.res (mkValue @loc.dbgOrigin @lft.typ @rgt.uniq @rgt.res @rgt.name [])
  | Bit           loc.res = R.Bit @op @lft.res (mkValue @loc.dbgOrigin @lft.typ @rgt.uniq @rgt.res @rgt.name [])
  | Conv          loc.res = R.Conv @op @val.res @tgt.res
  | Call          loc.res = let t = @resType.funTy (map R.valType @args.res) in R.Call @tailCall t (mkValue @loc.dbgOrigin t @fun.uniq @fun.res @fun.name []) @args.res
  | Alloca        loc.res = R.Alloca @elemType.res @amount.res @align
  | Load          loc.res = R.Load @addr.res @atomicOrdering @align
  | Store         loc.res = R.Store @val.res @ptr.res @atomicOrdering @align
  | Fence         loc.res = R.Fence @syncScope @atomicOrdering
  | CmpXchg       loc.res = R.CmpXchg @weak @volatile @ptr.res @value.res @equalValue.res @syncScope @successOrdering @failOrdering
  | AtomicRW      loc.res = R.AtomicRW @volatile @op @ptr.res @value.res @syncScope @syncOrdering
  | ICmp          loc.res = R.ICmp @op @lft.res (mkValue @loc.dbgOrigin @lft.typ @rgt.uniq @rgt.res @rgt.name [])
  | FCmp          loc.res = R.FCmp @op @lft.res (mkValue @loc.dbgOrigin @lft.typ @rgt.uniq @rgt.res @rgt.name [])
  | Phi           loc.res = R.Phi @typ.res @preds.res
  | GEP           loc.res = R.GEP @inbounds @base.res @path.res
  | Select        loc.res = R.Select @cond.res @then.res (mkValue @loc.dbgOrigin @then.typ @else.uniq @else.res @else.name [])
  | ExtractValue  loc.res = R.ExtractValue @aggr.res @path
  | InsertValue   loc.res = R.InsertValue @val.res @aggr.res @path
  | ExtractElt    loc.res = R.ExtractElt @vec.res (mkValue @loc.dbgOrigin (R.PrimType (Integer 64)) @index.uniq @index.res @index.name [])
  | InsertElt     loc.res = R.InsertElt @vec.res @val.res (mkValue @loc.dbgOrigin (R.PrimType (Integer 64)) @index.uniq @index.res @index.name [])
  | ShuffleVector loc.res = R.ShuffleVector @vec1.res (mkValue @loc.dbgOrigin @vec1.typ @vec2.uniq @vec2.res @vec2.name []) @mask.res
  | Jump          loc.res = R.Jump @lab.res
  | Br            loc.res = R.Br @cond.res @then.res @else.res
  | Invoke        loc.res = let x = @ty.funTy (map R.valType @args.res) in R.Invoke x (mkValue @loc.dbgOrigin x @fn.uniq @fn.res @fn.name []) @args.res @normal.res @unwind.res
  | Comment       loc.res = R.Comment @comment
  | Unreachable   loc.res = R.Unreachable
  | Unwind        loc.res = R.Unwind
  | VaArg         loc.res = R.VaArg @vaList.res @argTy.res
  | IndirectBr    loc.res = R.IndirectBr @addr.res @dests.res
  | Switch        loc.res = R.Switch @val.res @defaultDest.res @cases.res
  | LandingPad    loc.res = R.LandingPad @resultTy.res @personality.res @cleanup @clauses.res
  | Resume        loc.res = R.Resume @val.res

-- These next rules exist purely for debugging purposes.
-- When an ill-formed value is detected by mkValue then it reports this debug origin.
sem Instr
  | Ret           loc.dbgOrigin = "ret"
  | RetVoid       loc.dbgOrigin = "retvoid"
  | Arith         loc.dbgOrigin = "arith"
  | Bit           loc.dbgOrigin = "bit"
  | Conv          loc.dbgOrigin = "conv"
  | Call          loc.dbgOrigin = "call"
  | Alloca        loc.dbgOrigin = "alloca"
  | Load          loc.dbgOrigin = "load"
  | Store         loc.dbgOrigin = "store"
  | Fence         loc.dbgOrigin = "fence"
  | CmpXchg       loc.dbgOrigin = "cmpxchg"
  | AtomicRW      loc.dbgOrigin = "atomicrw"
  | ICmp          loc.dbgOrigin = "icmp"
  | FCmp          loc.dbgOrigin = "fcmp"
  | Phi           loc.dbgOrigin = "phi"
  | GEP           loc.dbgOrigin = "gep"
  | Select        loc.dbgOrigin = "select"
  | ExtractValue  loc.dbgOrigin = "extractvalue"
  | InsertValue   loc.dbgOrigin = "insertvalue"
  | ExtractElt    loc.dbgOrigin = "extractelt"
  | InsertElt     loc.dbgOrigin = "insertelt"
  | ShuffleVector loc.dbgOrigin = "shufflevector"
  | Jump          loc.dbgOrigin = "jump"
  | Br            loc.dbgOrigin = "br"
  | Invoke        loc.dbgOrigin = "invoke"
  | Comment       loc.dbgOrigin = "comment"
  | Unreachable   loc.dbgOrigin = "unreachable"
  | Unwind        loc.dbgOrigin = "unwind"
  | VaArg         loc.dbgOrigin = "vaarg"
  | IndirectBr    loc.dbgOrigin = "indirectbr"
  | Switch        loc.dbgOrigin = "switch"
  | LandingPad    loc.dbgOrigin = "landingpad"
  | Resume        loc.dbgOrigin = "resume"

attr Values
  syn uniq use {:} {[]} :: {[R.UniqueId]}
  syn res  use {:} {[]} :: {[R.Value']}
  syn name use {:} {[]} :: {[Maybe String]}

sem Value | * loc.uniq :: uniqueref counter
              loc.name = Nothing
              loc.typ = Nothing
sem Value [ | | typ :: {Maybe R.Type} uniq :: {R.UniqueId} res :: {R.Value'} name :: {Maybe String} ]
  | ValInteger loc.res      = R.ValInteger @val
  | ValBool    loc.res      = R.ValBool @val
  | ValFloat   loc.res      = R.ValFloat @val
  | ValDouble  loc.res      = R.ValDouble @val
  | ValFP80    loc.res      = R.ValFP80 @val
  | ValIdent   loc.res      = R.ValIdent @ident.res
               lhs.uniq     = uniqueId @ident.res
               lhs.name     = Just ((\(Ident x) -> x) @ident.copy)
               lhs.typ      = Just (getType @ident.res)
  | ValSymbol  loc.res      = R.ValSymbol @sym.res
               lhs.uniq     = uniqueId @sym.res
               lhs.name     = Just ((\(Symbol x) -> x) @sym.copy)
               lhs.typ      = Just (getType @sym.res)
  | ValNull    loc.res      = R.ValNull
  | ValArray   loc.res      = R.ValArray @typ.res (zipWith4 (mkValue "valarray" @typ.res) @vals.uniq @vals.res @vals.name (repeat []))
  | ValVector  loc.res      = R.ValVector @typ.res (zipWith4 (mkValue "valvector" @typ.res) @vals.uniq @vals.res @vals.name (repeat []))
  | ValStruct  loc.res      = R.ValStruct @fields.res False
  | ValPackedStruct loc.res = R.ValStruct @fields.res True
  | ValString  loc.res      = R.ValString @str
  | ValConstExpr loc.res    = R.ValConstExpr @constExpr.res
  | ValUndef   loc.res      = R.ValUndef
  | ValLabel   loc.res      = R.ValLabel @lab.res
               lhs.uniq     = uniqueId @lab.res
               lhs.name     = Just (R.bbName @lab.res)
               lhs.typ      = Just (getType @lab.res)
  | ValZeroInit loc.res     = R.ValZeroInit
  | ValAsm     loc.res      = R.ValAsm @a @b @c @d
  | ValMd      loc.res      = R.ValMd @md.res

sem MaybeValue [ | | typ :: {Maybe R.Type} uniq :: {R.UniqueId} res :: {Maybe R.Value'} name :: {Maybe String} ]
  | Nothing loc.res  = Nothing
            loc.uniq :: uniqueref counter
            loc.name = Nothing
            loc.typ  = Nothing
  | Just loc.res  = Just @just.res
         loc.uniq = @just.uniq
         loc.name = @just.name
         loc.typ  = @just.typ

--
-- resolve llvm debug calls
--

attr InstrRelated [ dbgValuesInh :: {Map R.Value R.ValMd} | | dbgValuesSyn :: {Map R.Value R.ValMd} ]

-- TODO:

{
isDbgValue :: R.Value -> Bool
isDbgValue (R.valValue -> R.ValSymbol (R.SymValDeclare (R.decName -> Symbol "llvm.dbg.value"))) = True
isDbgValue _ = False
}

-- sem Instr
--   | Call +dbgValuesSyn = if isDbgValue @fun.res then Map.insert _key _value else id

--

attr TypedValues [ | | res use {:} {[]} :: {[R.Value]} ]

sem TypedValue [ dbgOrigin :: {String} | | res :: {R.Value} ]
  | Typed loc.res = mkValue (@lhs.dbgOrigin ++ " typed") @typ.res @val.uniq @val.res @val.name []

sem MaybeTypedValue [ | | res :: {Maybe R.Value} ]
  | Nothing loc.res = Nothing
  | Just loc.res = Just @just.res

attr ValueLabs [ | | res use {:} {[]} :: {[(R.Value, R.BasicBlock)]} ]

sem ValueLab [ | | res :: {(R.Value, R.BasicBlock)} ]
  | Tuple
      loc.res = (mkValue "valuelab" @lhs.typ @x1.uniq @x1.res @x1.name [], @x2.res)

attr BlockLabels [ | | res use {:} {[]} :: {[R.BasicBlock]} ]

attr Cases [ | | res use {:} {[]} :: {[(Integer, R.BasicBlock)]} ]

sem Case [ | | res :: {(Integer, R.BasicBlock)} ]
  | Tuple loc.res = (@x1, @x2.res)

attr Clauses [ | | res use {:} {[]} :: {[R.Clause]} ]

sem Clause [ | | res :: {R.Clause} ]
  | Catch loc.res = R.Catch @val.res
  | Filter loc.res = R.Filter @val.res

attr TypeDecls [ | | res use {:} {[]} :: {[R.TypeDecl]} ]

sem TypeDecl [ | | res :: {R.TypeDecl} ]
  | TypeDecl loc.res = R.TypeDecl @typeName.copy @typeValue.res

{-
attr NamedMds [ | | res use {:} {[]} :: {[R.NamedMd]} ]

sem NamedMd [ | | res :: {R.NamedMd} ]
  | NamedMd loc.res = R.NamedMd @nmName @nmValues
-}

attr UnnamedMds [ | | res use {:} {[]} :: {[R.UnnamedMd]} ]

sem UnnamedMd [ | | res :: {R.UnnamedMd} ]
  | UnnamedMd loc.res = R.UnnamedMd @umIndex @umValues.res @umDistinct

sem ValMd [ | | res :: {R.ValMd} ]
  | ValMdString loc.res = R.ValMdString @str
  | ValMdValue  loc.res = R.ValMdValue @val.res
  -- | ValMdRef    defined below
  | ValMdNode   loc.res = R.ValMdNode @children.res
  | ValMdLoc    loc.res = R.ValMdLoc @dbgLoc.res
  | ValMdDebugInfo loc.res = R.ValMdDebugInfo @info.res

sem MaybeValMds [ | | res use {:} {[]} :: {[Maybe R.ValMd]} ]

sem MaybeValMd [ | | res :: {Maybe R.ValMd} ]
  | Nothing loc.res = Nothing
  | Just loc.res = Just @just.res

sem ConstExpr [ | | res :: {R.ConstExpr} ]
  | ConstGEP loc.res = R.ConstGEP @inbounds @mix @mp.res @ixs.res
  | ConstConv loc.res = R.ConstConv @op @val.res @ty.res
  | ConstSelect loc.res = R.ConstSelect @cond.res @then.res @else.res
  | ConstBlockAddr loc.res = R.ConstBlockAddr @sym.res @lab.res
  | ConstFCmp loc.res = R.ConstFCmp @op @lft.res @rgt.res
  | ConstICmp loc.res = R.ConstICmp @op @lft.res @rgt.res
  | ConstArith loc.res = R.ConstArith @op @lft.res (mkValue "constarith" @lft.typ @rgt.uniq @rgt.res @rgt.name [])
  | ConstBit loc.res = R.ConstBit @op @lft.res (mkValue "constbit" @lft.typ @rgt.uniq @rgt.res @rgt.name [])

sem DebugLoc [ | | res :: {R.DebugLoc} ]
  | DebugLoc loc.res = R.DebugLoc @dlLine @dlCol @dlScope.res @dlIA.res @dlImplicit

sem DebugInfo [ | | res :: {R.DebugInfo} ]
  | DebugInfoBasicType
      loc.res = R.DebugInfoBasicType @basicType.res
  | DebugInfoCompileUnit
      loc.res = R.DebugInfoCompileUnit @compileUnit.res
  | DebugInfoCompositeType 
      loc.res = R.DebugInfoCompositeType @compositeType.res
  | DebugInfoDerivedType
      loc.res = R.DebugInfoDerivedType @derivedType.res
  | DebugInfoEnumerator
      loc.res = R.DebugInfoEnumerator @name @value
  | DebugInfoExpression
      loc.res = R.DebugInfoExpression @expression.res
  | DebugInfoFile
      loc.res = R.DebugInfoFile @file.res
  | DebugInfoGlobalVariable
      loc.res = R.DebugInfoGlobalVariable @globVar.res
  | DebugInfoGlobalVariableExpression
      loc.res = R.DebugInfoGlobalVariableExpression @globVarExpr.res
  | DebugInfoLexicalBlock
      loc.res = R.DebugInfoLexicalBlock @lexBlock.res
  | DebugInfoLexicalBlockFile
      loc.res = R.DebugInfoLexicalBlockFile @lexBlockFile.res
  | DebugInfoLocalVariable
      loc.res = R.DebugInfoLocalVariable @locVar.res
  | DebugInfoSubprogram
      loc.res = R.DebugInfoSubprogram @subprogram.res
  | DebugInfoSubrange
      loc.res = R.DebugInfoSubrange @subrange.res
  | DebugInfoSubroutineType
      loc.res = R.DebugInfoSubroutineType @subroutineType.res
  | DebugInfoNameSpace
      loc.res = R.DebugInfoNameSpace @namespace.res
  | DebugInfoTemplateTypeParameter
      loc.res = R.DebugInfoTemplateTypeParameter @templateTypeParam.res
  | DebugInfoTemplateValueParameter
      loc.res = R.DebugInfoTemplateValueParameter @templateValParam.res
  | DebugInfoImportedEntity
      loc.res = R.DebugInfoImportedEntity @importedEntity.res
  | DebugInfoLabel
      loc.res = R.DebugInfoLabel @label.res

sem DILabel [ | | res :: {R.DILabel} ]
  | DILabel
      loc.res = R.DILabel @dilScope.res @dilName @dilFile.res @dilLine

sem DIImportedEntity [ | | res :: {R.DIImportedEntity} ]
  | DIImportedEntity
      loc.res
        = R.DIImportedEntity
            (toEnum (fromIntegral @diieTag))
            @diieScope.res
            @diieEntity.res
            @diieFile.res
            @diieLine
            @diieName

sem DITemplateTypeParameter [ | | res :: {R.DITemplateTypeParameter} ]
  | DITemplateTypeParameter
      loc.res = R.DITemplateTypeParameter @dittpName @dittpType.res

sem DITemplateValueParameter [ | | res :: {R.DITemplateValueParameter} ]
  | DITemplateValueParameter
      loc.res
        = R.DITemplateValueParameter
            (toEnum (fromIntegral @ditvpTag))
            @ditvpName
            @ditvpType.res
            @ditvpValue.res

sem DINameSpace [ | | res :: {R.DINameSpace} ]
  | DINameSpace
      loc.res = R.DINameSpace @dinsName @dinsScope.res @dinsFile.res @dinsLine

sem DIBasicType [ | | res :: {R.DIBasicType} ]
  | DIBasicType
      loc.res
        = R.DIBasicType
            (toEnum (fromIntegral @dibtTag))
            @dibtName
            @dibtSize
            @dibtAlign
            (toEnum (fromIntegral @dibtEncoding))
            @dibtFlags

sem DICompileUnit [ | | res :: {R.DICompileUnit} ]
  | DICompileUnit
      loc.res
        = R.DICompileUnit
            @dicuLanguage
            @dicuFile.res
            @dicuProducer
            @dicuIsOptimized
            @dicuFlags
            @dicuRuntimeVersion
            @dicuSplitDebugFilename
            @dicuEmissionKind
            @dicuEnums.res
            @dicuRetainedTypes.res
            @dicuSubprograms.res
            @dicuGlobals.res
            @dicuImports.res
            @dicuMacros.res
            @dicuDWOId
            @dicuSplitDebugInlining
            @dicuDebugInfoForProf
            @dicuNameTableKind
            @dicuRangesBaseAddress
            @dicuSysRoot
            @dicuSDK

sem DICompositeType [ | | res :: {R.DICompositeType} ]
  | DICompositeType
     loc.res
       = R.DICompositeType
           (toEnum (fromIntegral @dictTag))
           @dictName
           @dictFile.res
           @dictLine
           @dictScope.res
           @dictBaseType.res
           @dictSize
           @dictAlign
           @dictOffset
           @dictFlags
           @dictElements.res
           @dictRuntimeLang
           @dictVTableHolder.res
           @dictTemplateParams.res
           @dictIdentifier
           @dictDiscriminator.res
           @dictDataLocation.res

sem DIDerivedType [ | | res :: {R.DIDerivedType} ]
  | DIDerivedType
      loc.res
        = R.DIDerivedType
            (toEnum (fromIntegral @didtTag))
            @didtName
            @didtFile.res
            @didtLine
            @didtScope.res
            @didtBaseType.res
            @didtSize
            @didtAlign
            @didtOffset
            @didtFlags
            @didtExtraData.res

sem DIExpression [ | | res :: {R.DIExpression} ]
  | DIExpression loc.res = R.DIExpression @dieElements

sem DIFile [ | | res :: {R.DIFile} ]
  | DIFile loc.res = R.DIFile @difFilename @difDirectory

sem DIGlobalVariable [ | | res :: {R.DIGlobalVariable} ]
  | DIGlobalVariable
      loc.res
        = R.DIGlobalVariable
            @digvScope.res
            @digvName
            @digvLinkageName
            @digvFile.res
            @digvLine
            @digvType.res
            @digvIsLocal
            @digvIsDefinition
            @digvVariable.res
            @digvDeclaration.res
            @digvAlignment

sem DIGlobalVariableExpression [ | | res :: {R.DIGlobalVariableExpression} ]
  | DIGlobalVariableExpression
      loc.res
        = R.DIGlobalVariableExpression
            @digveVariable.res
            @digveExpression.res

sem DILexicalBlock [ | | res :: {R.DILexicalBlock} ]
  | DILexicalBlock
      loc.res
        = R.DILexicalBlock
            @dilbScope.res
            @dilbFile.res
            @dilbLine
            @dilbColumn

sem DILexicalBlockFile [ | | res :: {R.DILexicalBlockFile} ]
  | DILexicalBlockFile
      loc.res
        = R.DILexicalBlockFile
            @dilbfScope.res
            @dilbfFile.res
            @dilbfDiscriminator

sem DILocalVariable [ | | res :: {R.DILocalVariable} ]
  | DILocalVariable
      loc.res
        = R.DILocalVariable
            @dilvScope.res
            @dilvName
            @dilvFile.res
            @dilvLine
            @dilvType.res
            @dilvArg
            @dilvFlags

sem DISubprogram [ | | res :: {R.DISubprogram} ]
  | DISubprogram
      loc.res
        = R.DISubprogram
            @dispScope.res
            @dispName
            @dispLinkageName
            @dispFile.res
            @dispLine
            @dispType.res
            @dispIsLocal
            @dispIsDefinition
            @dispScopeLine
            @dispContainingType.res
            @dispVirtuality
            @dispVirtualIndex
            @dispThisAdjustment
            @dispFlags
            @dispIsOptimized
            @dispUnit.res
            @dispTemplateParams.res
            @dispDeclaration.res
            @dispVariables.res
            @dispThrownTypes.res

sem DISubrange [ | | res :: {R.DISubrange} ]
  | DISubrange loc.res = R.DISubrange @disrCount @disrLowerBound

sem DISubroutineType [ | | res :: {R.DISubroutineType} ]
  | DISubroutineType loc.res = R.DISubroutineType @distFlags @distTypeArray.res

--------------------------------------------------------------------------------
-- Interesting resolution
--------------------------------------------------------------------------------

{
lookupEnv :: (Show a, Ord a) => String -> a -> Map a b -> b
lookupEnv loc key env = fromMaybe
  (error (concat
    [ "In Resolve.ag at "
    , loc
    , ", key not found: "
    , show key
    , ", env only contains: "
    , show (Map.keys env)
    ]))
  (env Map.!? key)
}

sem BlockLabel [ | | res :: {R.BasicBlock} ]
  | Named Anon loc.res = lookupEnv "Named Anon loc.res" @loc.copy @lhs.labEnv

sem Ident [ | | res :: {R.IdentValue}  ]
  | Ident loc.res = lookupEnv "Ident loc.res" @loc.copy @lhs.identEnv

sem Ident [ | | resTy :: {R.Type} ]
  | Ident loc.resTy = lookupEnv "Ident loc.resTy" @loc.copy @lhs.typeEnv

sem Symbol [ | | res :: {R.SymValue} ]
  | Symbol loc.res = lookupEnv "Symbol loc.res" @loc.copy @lhs.symEnv

sem ValMd
  | ValMdRef loc.res = lookupEnv "ValMdRef loc.res" @ref @lhs.valMdEnv

--------------------------------------------------------------------------------
-- Useful sets
--------------------------------------------------------------------------------

set DI = DebugInfo DICompileUnit DICompositeType DIDerivedType DIGlobalVariable
         DIGlobalVariableExpression DIImportedEntity DILabel DILexicalBlock
         DILexicalBlockFile DILocalVariable DINameSpace DISubprogram
         DISubroutineType DITemplateTypeParameter DITemplateValueParameter
         DebugLoc

set ValueRelated = Value Values TypedValues ValueLabs ValueLab TypedValue
                   MaybeValue MaybeTypedValue Clause Clauses ConstExpr

set ValMdRelated = ValMd MaybeValMd StmtMds StmtMd MaybeValMds
                   GlobalMdAttachments FnMdAttachments UnnamedMds UnnamedMd

set SubTop = Globals Global Declares Declare Defines Define GlobalAliases
             GlobalAlias

set InstrRelated = BasicBlocks BasicBlock Stmts Stmt Instr

--------------------------------------------------------------------------------
-- Names
--------------------------------------------------------------------------------

sem BasicBlock | BasicBlock
  loc.bbName
    = case @bbLabel of
        Just (Named i) -> prettyIdent i
        Just (Anon n) -> "%" ++ show n
        Nothing -> "bb" ++ show @bbUniqueId

--------------------------------------------------------------------------------
-- Types
--------------------------------------------------------------------------------

sem TypedValue [ | | typ :: {R.Type} ] | Typed lhs.typ = @typ.res

sem Instr | Phi preds.typ = @typ.res

attr ValueLabs ValueLab
  inh typ :: {R.Type}

sem Type [ | | funTy :: {[R.Type] -> R.Type} ]
  | * lhs.funTy = makeFunTy @loc.res

--------------------------------------------------------------------------------
-- Unique ids
--------------------------------------------------------------------------------

{
nextUnique :: Int -> (Int, Int)
nextUnique x = (x + 1, x)
}

attr *
  chn counter :: Int

sem BasicBlock | BasicBlock loc.bbUniqueId :: uniqueref counter

sem Stmt
  | Result loc.stmtUniqueId :: uniqueref counter
  | Effect loc.stmtUniqueId :: uniqueref counter

--------------------------------------------------------------------------------
-- Label environment synthesis
--------------------------------------------------------------------------------

attr InstrRelated BlockLabels BlockLabel Case Cases ValueRelated ValMdRelated DI
  inh labEnv :: {Map BlockLabel R.BasicBlock}

attr BasicBlocks BasicBlock
  syn labEnvSyn use {<>} {mempty} :: {Map BlockLabel R.BasicBlock}

sem Define
  | Define loc.labEnv = @defBody.labEnvSyn

sem BasicBlock
  | BasicBlock
      +labEnvSyn
        = case @bbLabel of
            Nothing -> id
            Just lab -> Map.insert lab @loc.res

--------------------------------------------------------------------------------
-- Stmt parent basic block
--------------------------------------------------------------------------------

attr Stmts Stmt
  inh parentBasicBlock :: {R.BasicBlock}

sem BasicBlock | BasicBlock bbStmts.parentBasicBlock = @loc.res

--------------------------------------------------------------------------------
-- Value identifier environment synthesis
--------------------------------------------------------------------------------

attr Ident InstrRelated ValueRelated ValMdRelated DI TypedIdent TypedIdents
  inh identEnv :: {Map Ident R.IdentValue}

attr BasicBlocks BasicBlock Stmts Stmt TypedIdents TypedIdent
  syn identEnvSyn use {<>} {mempty} :: {Map Ident R.IdentValue}

attr TypedIdents TypedIdent BasicBlocks BasicBlock
  inh parentDefine :: {R.Define}

sem Define
  | Define loc.identEnv = @defBody.identEnvSyn <> @defArgs.identEnvSyn
           loc.parentDefine = @loc.res

sem Stmt
  | Result +identEnvSyn = Map.insert @ident.copy (R.IdentValStmt @loc.res)

sem TypedIdent
  | Typed +identEnvSyn = Map.insert @ident.copy (R.IdentValArgument @loc.res)

--------------------------------------------------------------------------------
-- Type identifier environment synthesis
--------------------------------------------------------------------------------

attr Ident TypeDecls TypeDecl Types Type SubTop Define TypedIdents TypedIdent
  InstrRelated ValueRelated ValMdRelated MaybeType DI Cases Case
  inh typeEnv :: {Map Ident R.Type}

attr TypeDecls TypeDecl
  syn typeEnvSyn use {<>} {mempty} :: {Map Ident R.Type}
      
sem Module
  | Module loc.typeEnv = @modTypes.typeEnvSyn

sem TypeDecl
  | TypeDecl +typeEnvSyn = Map.insert @typeName.copy @typeValue.res

--------------------------------------------------------------------------------
-- Symbol environment synthesis
--------------------------------------------------------------------------------

sem Module | Module
  loc.symEnv
    = mconcat
        [ @modAliases.symEnvSyn
        , @modGlobals.symEnvSyn
        , @modDeclares.symEnvSyn
        , @modDefines.symEnvSyn
        ]

attr GlobalAliases GlobalAlias Globals Global Declares Declare Defines Define
  syn symEnvSyn use {<>} {mempty} :: {Map Symbol R.SymValue}

attr Symbol SubTop InstrRelated
  ValMdRelated DI ValueRelated
  inh symEnv :: {Map Symbol R.SymValue}

sem GlobalAlias | GlobalAlias
  +symEnvSyn = Map.insert @aliasName.copy (R.SymValAlias @loc.res)

sem Global | Global
  +symEnvSyn = Map.insert @globalSym.copy (R.SymValGlobal @loc.res)

sem Declare | Declare
  +symEnvSyn = Map.insert @decName.copy (R.SymValDeclare @loc.res)

sem Define | Define
  +symEnvSyn = Map.insert @defName.copy (R.SymValDefine @loc.res)

--------------------------------------------------------------------------------
-- ValMd environment synthesis
--------------------------------------------------------------------------------

sem Module | Module
  loc.valMdEnv
    = @modUnnamedMd.valMdEnvSyn

attr UnnamedMds UnnamedMd
  syn valMdEnvSyn use {<>} {mempty} :: {Map Int R.ValMd}

attr SubTop InstrRelated ValMdRelated DI ValueRelated
  inh valMdEnv :: {Map Int R.ValMd}

sem UnnamedMd | UnnamedMd
  +valMdEnvSyn = Map.insert @umIndex @umValues.res

--------------------------------------------------------------------------------
-- Explicitly missing rules (our grammar is an overapproximation)
--------------------------------------------------------------------------------

sem GlobalAlias | GlobalAlias aliasValue
  .labEnv = error "global aliases should not reference local labels"
  .identEnv = error "global aliases should not reference local values"

sem Global | Global
  globalValue
    .labEnv = error "global values should not reference local labels"
    .identEnv = error "global values should not reference local values"
  globalMetadata
    .labEnv = error "global metadata should not reference local labels"
    .identEnv = error "global metadata should not reference local values"

sem Type | Alias ident
  .identEnv = error "type aliases should not reference values"

sem BlockLabel | Named ident
  .identEnv = error "block labels should not reference values"
  .typeEnv = error "block labels should not reference types"

sem Define | Define defArgs
  .identEnv = error "arguments should not reference values"

sem TypeDecl | TypeDecl typeName
  .identEnv = error "type declarations should not reference values"

